package cn.abjxt.Calendar1;
import java.awt.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Scanner;
/*        可视化日历程序
 * 
 * 
 */
public class Calendar1 {

	public Calendar1() {
		// TODO Auto-generated constructor stub
	}
public static void main(String[] args) {
	System.out.println("请输入日期，(年月日，格式:2008-5-20):");
	Scanner sc=new Scanner(System.in);
	String temp=sc.nextLine();
	DateFormat format=new SimpleDateFormat("yyyy-MM-dd");
	try {
		Date d=format.parse(temp);                                     //将固定类型的日期输入字符串转换为日期Date
		Calendar cal=new GregorianCalendar();
		cal.setTime(d);
		System.out.println(d);
		// TODO Auto-generated method stub	   
		int maxdays=maxdays(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH));                                          //定义mandays为一个月中的天数	
		cal.set(Calendar.DATE, 1);                                 //cal.Calendar.YEAR和cal。get(Claecdar.YEAR)返回值是不同的
		System.out.println(cal.get(Calendar.DAY_OF_WEEK));
		int offset=cal.get(Calendar.DAY_OF_WEEK)-1;
		
					
		System.out.print("日\t一\t二\t三\t四\t五\t六");
	    System.out.println();
	    int j=0;
	    for(int i=1;i<=maxdays+offset;i++)
	    {
	    	if((i-offset)<=0)
	    	{
	    		System.out.print(" "+"\t");
	    		j++;
	    	}
	    	if((i-offset)>0)
	    	{System.out.print((i-offset)+"\t");
	    	j++;
	    	}
	    	if(j%7==0)
	    	{
	    		System.out.print("\n");
	    	}
	    	
	    }
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	


    
}
private static int maxdays(int year,int month) {
	// TODO Auto-generated method stub
	int day;
	switch(month) {
	case 1:  
		 day=31;
		break;
	case 2:
		if(year%400==0||year%100!=0&&year%4==0)
		       {
			     day=29;
		         break;
		         }
		else
			 day=28;break;
	case 3:  day=31;break;
	case 4:  day=30;break;
	case 5:  day=31;break;
	case 6:  day=30;break;
	case 7:  day=31;break;
	case 8:  day=31;break;
	case 9:  day=30;break;
	case 10: day=31;break;
	case 11: day=30;break;
	case 12: day=31;break;
	default:
		return -1;
	}
	return day;
	
}
}
